<?php

// CLI Script

// Get Command Line Arguments List
$sortOptions = "";
$sortOptions .= "c:";
$sortOptions .= "f:";
$sortOptions .= "v::";
$sortOptions .= "h::";

$options = getopt($sortOptions);

// Override Globals
foreach( $options as $o => $a ) {
    while($k=array_search("-". $o. $a, $GLOBALS['argv'])) {
        if($k) {
            unset($GLOBALS['argv'][$k]);
        }
    }
    while($k=array_search("-" . $o, $GLOBALS['argv'])) {
        if($k) {
            unset($GLOBALS['argv'][$k]);
            unset($GLOBALS['argv'][$k+1]);
        }
    }
}
$GLOBALS['argv'] = array_merge($GLOBALS['argv']);

//  Parameters array
$param_arr = array();
$lenght = count((array)$GLOBALS['argv']);
if ($lenght > 0) {
    for ($i = 1; $i < $lenght; $i++) {
        if (isset($GLOBALS['argv'][$i])) {
            list($paramName, $paramValue) = explode("=", $GLOBALS['argv'][$i], 2);
            $param_arr[$paramName] = $paramValue;
        }
    }
}

//  Add ClassName and FunctionsName
$className    = !array_key_exists('c', $options) ?: $options['c'];
$functionName = !array_key_exists('f', $options) ?: $options['f'];

//  Usage Parameter

if (array_key_exists('h', $options)) {
    $usage = <<<USAGE
Usage: cli [options] [-c] <class> [-f] <function> [args...]

Options:
-h Print this help
-v verbose mode
\n
USAGE;
    echo $usage;
    exit;
}


print_r($param_arr);
/*
function make($what, $name){

}

function server(){
    echo ("Server running at http://localhost:8000. To quit press CTRL + C");
    echo exec('php -S localhost:8000');
}


//  Invoke functions
return call_user_func_array(array($className, $functionName), $this->realParams);
//  Run function
/*
private function getRealParams($params){
    $realParams = array();
    $class = new \ReflectionClass(new $this->className);
    $reflect = $class->getMethod($this->functionName);

    foreach ($reflect->getParameters() as $i => $param) {
        $pname = $param->getName();
        if ($param->isPassedByReference()) {
            /// @todo shall we raise some warning?
        }
        if (array_key_exists($pname, $params)) {
            $realParams[] = $params[$pname];
        } else if ($param->isDefaultValueAvailable()) {
            $realParams[] = $param->getDefaultValue();
        } else {
            throw new Exception("{$this->className}::{$this->functionName}() param: missing param: {$pname}");
        }
    }
    return $realParams;
}
*/
