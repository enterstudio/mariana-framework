<?php
// CLI Script

# REMOVE ERROR DISPLAY
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);

# DEFINE SOME VARIABLES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
define('ROOT', realpath(dirname(__FILE__)));

# SET OPTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
$options = array();
$options[] = "help";
$options[] = "server";
$options[] = "create";
$options[] = "update";

# SET COMMANDS
$commands = $argv;
unset($commands[0]);


# AUXILIAR FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @param $dir
 * @desc: Checks if file exists in directory
 */
function checkIfFileExists($path){
    if(file_exists($path)) {
        echo "File allready exists in $path";
        return true;
    }
    return false;
}

/**
 * @param $path
 * @param $contents
 * @desc if file doesn't exist, creates a file and writes it's contents
 */
function makeFile($path, $contents){
    $my_file = $path;
    $handle = fopen($my_file, 'w') or die('Cannot open file:  '.$path);
    $data = $contents;
    fwrite($handle, $data);
    fclose($handle);
}

/**
 * @param $name
 * @param bool|false $parsingType
 * @desc: parses the name as the convention says
 */
function parseName($name, $parsingType = false){
    if(!isset($parsingType))
        $parsingType = "uppercamelcase";

    if($parsingType == "uppercamelcase"){

        $name = explode(" ", trim($name));
        $tmpName = "";
        foreach($name as $n){
            $tmpName .= ucfirst($n);
        }

        $name = $tmpName;
        $name = explode("-", $name);
        $tmpName = "";
        foreach($name as $n){
            $tmpName .= ucfirst($n);
        }

        $name = $tmpName;
        $name = explode("-", $name);
        $tmpName = "";
        foreach($name as $n){
            $tmpName .= ucfirst($n);
        }

        $name = $tmpName;
    }else{
        $name = strtolower($name);
    }

    return $name;
}

/**
 * @param $command
 * @param $options
 * @desc checks if command is valid, if not, returns help.
 */
function checkForValidCommand($commands , $options){
    # Command String threatment
    $command = strtolower(trim($commands[1]));

    foreach ($options as $o) {
        # Option String treatment
        $o = strtolower(trim($o));

        if($o == $command) {
            return $command($commands);
        }

        if($o == "create"){
            if (strpos($command, $o.":") === 0) {
                $whatsCreated = explode(":",$command);

                if(isset($whatsCreated[1]) && isset($commands[2])){
                    return create($whatsCreated[1] , $commands[2]);
                }

            }
        }
    }

    return help();
}

# STARTUP
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * On start checks the inputs and verifies if the inputs are valid functions
 */
checkForValidCommand($commands,$options);

# THE FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * @desc helper function. runs if the functions dont match
 */
function help(){
    $usage = <<<USAGE
Usage: cli [options] [-c] <class> [-f] <function> [args...]

OPTIONS:
help: Print this help

server: Start php server on this directory. You can customize the server settings by running: cli server XX - This will run http://localhost:XX

create: Creates a file with proper setup (replace NAME with it's name).
    - create:database NAME
    - create:table NAME - (keep it's name as plural EX: users - also creates a model)
    - create:controller NAME - (will be named as nameController)
    - create:model NAME - (keep it's name as plural EX: users)
    - create:middleware NAME

update: Updates database tables
    - seed
    - drop
\n
USAGE;
    echo $usage;
    exit;
}

/**
 * @param $commands
 *  $commands[0] and [1]: not used
 *  $commands[2]: port
 * @return Starts php native server
 *
 */
function server($commands){

    (isset($commands[2]))?
        $port = $commands[2] :
        $port = 8000;
    echo ("\n Server running at http://localhost:$port.\n To quit press CTRL + C");	
    $command_1 = "php -S localhost:$port";
	$command_2 = "start /max http://localhost:$port";
	return exec($command_2."&& ".$command_1);
}

/**
 * @param $what
 * @param $name
 * @desc creates files. Ex database, model, controllers, tables, and so on.
 */
function create($what, $name){

    $name = $name[2];
    $possibleCreations = array(
        "database",
        "table",
        "model",
        "controller",
        "middleware"
    );

    if(!in_array(strtolower(trim($what)),$possibleCreations)){
        return help();
    }

    # CREATE DATABASE
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if($what == "database"){
        $name = strtolower($name);
        $path = ROOT."/app/files/database/databases/";
        return "Created database: $name";
    }

    # CREATE TABLE
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    if($what == "table"){
        $file_name = strtolower($name);
        $path = ROOT."/app/files/database/seeds/".$file_name.".php";
        $contents =
        "<?php
        /**
         * Created with love using Mariana Framework
         * pihh.rocks@gmail.com
         */

        # Table Name
        \$table = ".$name.";

        # Table Fields
        \$fields = array(
            'id'            =>  'INTEGER PRIMARY KEY',
            'timestamp'     =>  'TIMESTAMP'
        );


        # Table Seeds
        \$seeds = array(
            array('1', 'CURRENT_TIMESTAMP'),
        );

        return array(
            'fields' => \$fields,
            'seeds'  => \$seeds
        );

        ?>";
        makeFile($path,$contents);
        return "Created database seed file: $name at $path";
    }

    # THE FUNCTIONS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if($what == "controller"){
        $file_name = strtolower($name);
        $name = parseName($name);
        $contents =
"<?php

use Mariana\\Framework;
use Mariana\\Framework\\Controller;
use Mariana\\Framework\\Database;

class $name extends Controller{

    /**
     * Default method;
     */
     public function index(){

     }

}";

        $path = ROOT."/mvc/controllers/".$file_name.".controller.php";
        return "Created controller: $name in $path";
    }

    # CREATE MODEL
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if($what == "model") {
        $file_name = strtolower($name);
        $name = parseName($name);
        $contents =
"<?php

use \\Mariana\\Framework\\Model;

class $name extends Model{

//protected static \$table = '$file_name';
//protected static \$primary;

}
";
        $path = ROOT."/mvc/models/".$file_name.".model.php";
        return "Created model: $name in $path";
    }

    # THE MIDDLEWARE
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if($what == "middleware") {
        $file_name = strtolower($name);
        $name = parseName($name);
        $contents =
"<?php
use Mariana\\Framework\\Middleware;

class $name extends Middleware{

}

?>
";
        $path = ROOT."/mvc/middlewate/".$file_name.".php";
        return "Created middleware: $name in $path";
    }


    return help();
}

function update(){

}

exit();
