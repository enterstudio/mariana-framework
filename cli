<?php
// CLI Script

# REMOVE ERROR DISPLAY
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);

# DEFINE SOME VARIABLES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
define('ROOT', realpath(dirname(__FILE__)));

# SET OPTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
$options = array();
$options[] = "help";
$options[] = "server";
$options[] = "create";

# SET COMMANDS
$commands = $argv;
unset($commands[0]);


# AUXILIAR FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @param $dir
 * @desc: Checks if file exists in directory
 */
function checkIfFileExists($path){
    if(file_exists($path)) {
        echo "File allready exists in $path";
        return true;
    }
    return false;
}

/**
 * @param $path
 * @param $contents
 * @desc if file doesn't exist, creates a file and writes it's contents
 */
function makeFile($path, $contents){
    $my_file = $path;
    $handle = fopen($my_file, 'w') or die('Cannot open file:  '.$path);
    $data = $contents;
    fwrite($handle, $data);
    fclose($handle);
}

/**
 * @param $command
 * @param $options
 * @desc checks if command is valid, if not, returns help.
 */
function checkForValidCommand($commands , $options){
    # Command String threatment
    $command = strtolower(trim($commands[1]));

    foreach ($options as $o) {
        # Option String treatment
        $o = strtolower(trim($o));

        if($o == $command) {
            return $command($commands);
        }

        if($o == "create"){
            if (strpos($command, $o.":") === 0) {
                $whatsCreated = explode(":",$command);

                if(isset($whatsCreated[1]) && isset($commands[2])){
                    return create($whatsCreated[1] , $commands[2]);
                }

            }
        }
    }

    return help();
}

# STARTUP
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * On start checks the inputs and verifies if the inputs are valid functions
 */
checkForValidCommand($commands,$options);

# THE FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * @desc helper function. runs if the functions dont match
 */
function help(){
    $usage = <<<USAGE
Usage: cli [options] [-c] <class> [-f] <function> [args...]

OPTIONS:
help: Print this help

server: Start php server on this directory. You can customize the server settings by running: cli server XX - This will run http://localhost:XX

create: Creates a file with proper setup (replace NAME with it's name).
    - create:database NAME
    - create:table NAME - (keep it's name as plural EX: users - also creates a model)
    - create:controller NAME - (will be named as nameController)
    - create:model NAME - (keep it's name as plural EX: users)
    - create:middleware NAME
\n
USAGE;
    echo $usage;
    exit;
}

/**
 * @param $commands
 *  $commands[0] and [1]: not used
 *  $commands[2]: port
 * @return Starts php native server
 *
 */
function server($commands){

    (isset($commands[2]))?
        $port = $commands[2] :
        $port = 8000;

    echo ("\n Server running at http://localhost:$port.\n To quit press CTRL + C");
    return exec("php -S localhost:$port");

}

function create($what, $name){
    $possibleCreations = array(
        "database",
        "table",
        "model",
        "controller",
        "middleware"
    );
}

//TODO: Case none matches, run make:hep

//TODO: Make database , table (creates a model) , model, controller

/*
// Get Command Line Arguments List
$sortOptions = "";
$sortOptions .= "c:";
$sortOptions .= "f:";
$sortOptions .= "v::";
$sortOptions .= "h::";

$options = getopt($sortOptions);

// Override Globals
foreach( $options as $o => $a ) {
    while($k=array_search("-". $o. $a, $GLOBALS['argv'])) {
        if($k) {
            unset($GLOBALS['argv'][$k]);
        }
    }
    while($k=array_search("-" . $o, $GLOBALS['argv'])) {
        if($k) {
            unset($GLOBALS['argv'][$k]);
            unset($GLOBALS['argv'][$k+1]);
        }
    }
}
$GLOBALS['argv'] = array_merge($GLOBALS['argv']);


//  Parameters array
$param_arr = array();
$lenght = count((array)$GLOBALS['argv']);
if ($lenght > 0) {
    for ($i = 1; $i < $lenght; $i++) {
        if (isset($GLOBALS['argv'][$i])) {
            list($paramName, $paramValue) = explode("=", $GLOBALS['argv'][$i], 2);
            $param_arr[$paramName] = $paramValue;
        }
    }
}

print_r($param_arr);

/*


//  Parameters array
$param_arr = array();
$lenght = count((array)$GLOBALS['argv']);
if ($lenght > 0) {
    for ($i = 1; $i < $lenght; $i++) {
        if (isset($GLOBALS['argv'][$i])) {
            list($paramName, $paramValue) = explode("=", $GLOBALS['argv'][$i], 2);
            $param_arr[$paramName] = $paramValue;
        }
    }
}

//  Add ClassName and FunctionsName
$className    = !array_key_exists('c', $options) ?: $options['c'];
$functionName = !array_key_exists('f', $options) ?: $options['f'];

//  Usage Parameter

if (array_key_exists('h', $options)) {
    $usage = <<<USAGE
Usage: cli [options] [-c] <class> [-f] <function> [args...]

Options:
-h Print this help
-v verbose mode
\n
USAGE;
    echo $usage;
    exit;
}


*/